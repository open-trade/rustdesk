name: Build the flutter version of the RustDesk 

on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

env:
  CARGO_NDK_VERSION: "3.1.2"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.10.6"
  FLUTTER_RUST_BRIDGE_VERSION: "1.75.3"
  # for arm64 linux
  FLUTTER_ELINUX_VERSION: "3.10.6"
  FLUTTER_ELINUX_COMMIT_ID: "410b3ca42f2cd0c485edf517a1666652bab442d4"
  TAG_NAME: "${{ inputs.upload-tag }}"
  # vcpkg version: 2023.04.15
  # for multiarch gcc compatibility
  VCPKG_COMMIT_ID: "501db0f17ef6df184fcdbfbe0f87cde2313b6ab1"
  VERSION: "1.2.2"
  NDK_VERSION: "r25c"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY: '${{ secrets.ANDROID_SIGNING_KEY }}'
  MACOS_P12_BASE64: '${{ secrets.MACOS_P12_BASE64 }}'
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY: '${{ secrets.RS_PUB_KEY }}'
  RENDEZVOUS_SERVER: '${{ secrets.RENDEZVOUS_SERVER }}'
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"
  CARGO_INCREMENTAL: "0"

jobs:  
  build-vcpkg-deps-linux:
    uses: ./.github/workflows/vcpkg-deps-linux.yml  
  generate-bridge-linux:
    uses: ./.github/workflows/bridge.yml
  build-rustdesk-lib-linux-arm:
    if: ${{ inputs.upload-artifact }}
    needs: [generate-bridge-linux, build-vcpkg-deps-linux]
    name: build-rust-lib ${{ matrix.job.target }} (${{ matrix.job.os }}) [${{ matrix.job.extra-build-features }}]
    runs-on: [self-hosted, linux, ARM64]
    strategy:
      fail-fast: false
      matrix:
        # use a high level qemu-user-static
        job:
          - {
              arch: aarch64,
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-20.04, # just for naming package, not running host
              use-cross: true,
              extra-build-features: "",
              enable-headless: true
            }
          - {
              arch: aarch64,
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-20.04, # just for naming package, not running host
              use-cross: true,
              extra-build-features: "appimage",
              enable-headless: false
            }
          # - { arch: aarch64, target: aarch64-unknown-linux-gnu   , os: ubuntu-20.04, use-cross: true, extra-build-features: "flatpak" }
          # - {
          #     arch: armv7,
          #     target: armv7-unknown-linux-gnueabihf,
          #     os: ubuntu-20.04,
          #     use-cross: true,
          #     extra-build-features: "",
          #   }
          # - { arch: armv7, target: armv7-unknown-linux-gnueabihf , os: ubuntu-20.04, use-cross: true, extra-build-features: "appimage" }
          # - { target: arm-unknown-linux-musleabihf, os: ubuntu-20.04, use-cross: true }
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo apt update -y
          sudo apt install qemu-user-static

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Free Space
        run: |
          df -h
          free -m

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal # minimal component installation (ie, no documentation)
      
      - name: Save Rust toolchain version
        run: |
          RUST_TOOLCHAIN_VERSION=$(cargo --version | awk '{print $2}')
          echo "RUST_TOOLCHAIN_VERSION=$RUST_TOOLCHAIN_VERSION" >> $GITHUB_ENV

      - name: Disable rust bridge build
        run: |
          # only build cdylib
          sed -i  "s/\[\"cdylib\", \"staticlib\", \"rlib\"\]/\[\"cdylib\"\]/g" Cargo.toml

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Restore vcpkg files
        uses: actions/download-artifact@master
        with:
          name: vcpkg-artifact-${{ matrix.job.arch }}
          path: /opt/artifacts/vcpkg/installed

      - uses: uraimo/run-on-arch-action@master
        name: Build rustdesk library for ${{ matrix.job.arch }}
        id: vcpkg
        with:
          arch: ${{ matrix.job.arch }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          setup: |
            ls -l "${PWD}"
            ls -l /opt/artifacts/vcpkg/installed
          dockerRunArgs: |
            --volume "${PWD}:/workspace"
            --volume "/opt/artifacts:/opt/artifacts"
          shell: /bin/bash
          install: |
            apt update -y
            echo -e "installing deps"
            apt-get -qq install -y  git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake libclang-dev ninja-build libappindicator3-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libvdpau-dev libva-dev libpam0g-dev libclang-dev llvm-dev libclang-10-dev llvm-10-dev pkg-config tree g++ gcc libvpx-dev tree > /dev/null
            # we have libopus compiled by us.
            apt remove -y libopus-dev || true
            # output devs
            ls -l ./
            tree -L 3 /opt/artifacts/vcpkg/installed
          run: |
            # disable git safe.directory
            git config --global --add safe.directory "*"
            # rust
            pushd /opt
            # do not use rustup, because memory overflow in qemu
            wget -O rust.tar.gz https://static.rust-lang.org/dist/rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}.tar.gz
            tar -zxvf rust.tar.gz > /dev/null && rm rust.tar.gz
            cd rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }} && ./install.sh
            rm -rf rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}
            # edit config
            mkdir -p ~/.cargo/
            echo """
              [source.crates-io]
              registry = 'https://github.com/rust-lang/crates.io-index'
            """ > ~/.cargo/config
            cat ~/.cargo/config
            # start build
            pushd /workspace
            export VCPKG_ROOT=/opt/artifacts/vcpkg
            export DEFAULT_FEAT=""
            if ${{ matrix.job.enable-headless }}; then
              export DEFAULT_FEAT=linux_headless
            fi
            export CARGO_INCREMENTAL=0
            cargo build --lib --features flutter,flutter_texture_render,${{ matrix.job.extra-build-features }},$DEFAULT_FEAT --release

      - name: Upload Artifacts
        uses: actions/upload-artifact@master
        with:
          name: librustdesk-${{ matrix.job.arch }}-${{ matrix.job.extra-build-features }}.so
          path: target/release/liblibrustdesk.so

  build-rustdesk-sciter-arm:
    if: ${{ inputs.upload-artifact }}
    needs: [build-vcpkg-deps-linux]
    name: build-rustdesk(sciter) ${{ matrix.job.target }} (${{ matrix.job.os }}) [${{ matrix.job.extra-build-features }}]
    runs-on: [self-hosted, linux, ARM64]
    strategy:
      fail-fast: false
      matrix:
        # use a high level qemu-user-static
        job:
          - {
              arch: armv7,
              target: armv7-unknown-linux-gnueabihf,
              deb-arch: armhf,
              os: ubuntu-latest,
              use-cross: true,
              extra-build-features: "",
              enable-headless: true
            }
          # - { arch: armv7, target: armv7-unknown-linux-gnueabihf , os: ubuntu-20.04, use-cross: true, extra-build-features: "appimage" }
          # - { target: arm-unknown-linux-musleabihf, os: ubuntu-20.04, use-cross: true }
    steps:

      - name: Maximize build space
        run: |
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo apt update -y
          sudo apt install qemu-user-static

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Free Space
        run: |
          df -h

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal # minimal component installation (ie, no documentation)
      
      - name: Save Rust toolchain version
        run: |
          RUST_TOOLCHAIN_VERSION=$(cargo --version | awk '{print $2}')
          echo "RUST_TOOLCHAIN_VERSION=$RUST_TOOLCHAIN_VERSION" >> $GITHUB_ENV

      - name: Restore vcpkg files
        uses: actions/download-artifact@master
        with:
          name: vcpkg-artifact-${{ matrix.job.arch }}
          path: /opt/artifacts/vcpkg/installed

      - uses: uraimo/run-on-arch-action@master
        name: Build rustdesk sciter binary for ${{ matrix.job.arch }}
        id: vcpkg
        with:
          arch: ${{ matrix.job.arch }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          setup: |
            ls -l "${PWD}"
          dockerRunArgs: |
            --volume "${PWD}:/workspace"
            --volume "/opt/artifacts:/opt/artifacts"
          shell: /bin/bash
          install: |
            apt update -y
            apt-get -qq install -y git cmake g++ gcc build-essential nasm yasm curl unzip xz-utils python3 wget pkg-config ninja-build pkg-config libgtk-3-dev liblzma-dev clang libappindicator3-dev rpm libclang-dev
            apt-get -qq install -y libdbus-1-dev pkg-config nasm yasm libglib2.0-dev libxcb-randr0-dev libxdo-dev libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev 
            apt-get -qq install -y libpulse-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libvpx-dev libvdpau-dev libva-dev libpam0g-dev
          run: |
            # disable git safe.directory
            git config --global --add safe.directory "*"
            # rust
            pushd /opt
            # do not use rustup, because memory overflow in qemu
            wget -O rust.tar.gz https://static.rust-lang.org/dist/rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}.tar.gz
            tar -zxvf rust.tar.gz > /dev/null && rm rust.tar.gz
            cd rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }} && ./install.sh
            rm -rf rust-${{env.RUST_TOOLCHAIN_VERSION}}-${{ matrix.job.target }}
            # edit config
            mkdir -p ~/.cargo/
            echo """
              [source.crates-io]
              registry = 'https://github.com/rust-lang/crates.io-index'
            """ > ~/.cargo/config
            cat ~/.cargo/config
            
            # build
            pushd /workspace
            python3 ./res/inline-sciter.py
            export VCPKG_ROOT=/opt/artifacts/vcpkg
            export ARCH=armhf
            export DEFAULT_FEAT=""
            export CARGO_INCREMENTAL=0
            if ${{ matrix.job.enable-headless }}; then
              export DEFAULT_FEAT=linux_headless
            fi
            cargo build --features inline,${{ matrix.job.extra-build-features }},$DEFAULT_FEAT --release --bins
            # package
            mkdir -p ./Release
            mv ./target/release/rustdesk ./Release/rustdesk
            wget -O ./Release/libsciter-gtk.so https://github.com/c-smile/sciter-sdk/raw/master/bin.lnx/arm32/libsciter-gtk.so
            ./build.py --package ./Release

      - name: Rename rustdesk
        shell: bash
        run: |
          for name in rustdesk*??.deb; do
              # use cp to duplicate deb files to fit other packages.
              cp "$name" "${name%%.deb}-${{ matrix.job.arch }}-sciter.deb"
          done

      - name: Publish debian package
        if: matrix.job.extra-build-features == '' && env.UPLOAD_ARTIFACT == 'true'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-sciter.deb

      - name: Upload Artifact
        uses: actions/upload-artifact@master
        if: ${{ contains(matrix.job.extra-build-features, 'flatpak') }}
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-sciter.deb
          path: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}-sciter.deb

  build-rustdesk-linux-arm:
    if: ${{ inputs.upload-artifact }}
    needs: [build-rustdesk-lib-linux-arm]
    name: build-rustdesk ${{ matrix.job.target }} (${{ matrix.job.os }}) [${{ matrix.job.extra-build-features }}]
    runs-on: [self-hosted, linux, ARM64]
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              arch: aarch64,
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-20.04, # just for naming package, not running host
              use-cross: true,
              extra-build-features: "",
            }
          - {
              arch: aarch64,
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-20.04, # just for naming package, not running host
              use-cross: true,
              extra-build-features: "appimage",
            }
          # - {
          #     arch: aarch64,
          #     target: aarch64-unknown-linux-gnu,
          #     os: ubuntu-20.04, # just for naming package, not running host
          #     use-cross: true,
          #     extra-build-features: "flatpak",
          #   }
          # - { arch: armv7, target: armv7-unknown-linux-gnueabihf , os: ubuntu-20.04, use-cross: true, extra-build-features: "" }
          # - { arch: armv7, target: armv7-unknown-linux-gnueabihf , os: ubuntu-20.04, use-cross: true, extra-build-features: "appimage" }
          # - { target: arm-unknown-linux-musleabihf, os: ubuntu-20.04, use-cross: true }
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Prepare env
        run: |
          sudo apt update -y
          sudo apt-get -qq install -y git curl wget nasm yasm libgtk-3-dev libarchive-tools
          mkdir -p ./target/release/

      - name: Restore the rustdesk lib file
        uses: actions/download-artifact@master
        with:
          name: librustdesk-${{ matrix.job.arch }}-${{ matrix.job.extra-build-features }}.so
          path: ./target/release/

      - name: Download Flutter
        shell: bash
        run: |
          # disable git safe.directory
          git config --global --add safe.directory "*"
          pushd /opt
          # clone repo and reset to flutter ${{ env.FLUTTER_VERSION }}
          git clone https://github.com/sony/flutter-elinux.git || true
          pushd flutter-elinux
            git fetch
            git reset --hard ${{ env.FLUTTER_ELINUX_COMMIT_ID }} 
          popd

      - uses: rustdesk-org/run-on-arch-action@amd64-support
        name: Build rustdesk binary for ${{ matrix.job.arch }}
        id: vcpkg
        with:
          arch: ${{ matrix.job.arch }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          setup: |
            ls -l "${PWD}"
          dockerRunArgs: |
            --volume "${PWD}:/workspace"
            --volume "/opt/artifacts:/opt/artifacts"
            --volume "/opt/flutter-elinux:/opt/flutter-elinux"
          shell: /bin/bash
          install: |
            apt update -y
            apt-get -qq install -y git cmake g++ gcc build-essential nasm yasm curl unzip xz-utils python3 wget pkg-config ninja-build pkg-config libgtk-3-dev liblzma-dev clang libappindicator3-dev rpm
          run: |
            # disable git safe.directory
            git config --global --add safe.directory "*"
            pushd /workspace
            # we use flutter-elinux to build our rustdesk
            export PATH=/opt/flutter-elinux/bin:$PATH
            sed -i "s/flutter build linux --release/flutter-elinux build linux/g" ./build.py
            # Setup flutter-elinux. Run doctor to check if issues here.
            flutter-elinux doctor -v
            # Patch arm64 engine for flutter 3.6.0+
            flutter-elinux precache --linux
            pushd /tmp
            curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_${{ env.FLUTTER_ELINUX_VERSION }}-stable.tar.xz
            tar -xvf flutter_linux_${{ env.FLUTTER_ELINUX_VERSION }}-stable.tar.xz flutter/bin/cache/artifacts/engine/linux-x64/shader_lib
            cp -R flutter/bin/cache/artifacts/engine/linux-x64/shader_lib /opt/flutter-elinux/flutter/bin/cache/artifacts/engine/linux-arm64
            popd
            # edit to corresponding arch
            case ${{ matrix.job.arch }} in
              aarch64)
                export ARCH=arm64
                sed -i "s/x64\/release/arm64\/release/g" ./build.py
              ;;
              armv7)
                export ARCH=armhf
                sed -i "s/x64\/release/arm\/release/g" ./build.py
              ;;
            esac
            export CARGO_INCREMENTAL=0
            python3 ./build.py --flutter --hwcodec --skip-cargo
            # rpm package
            echo -e "start packaging fedora package"
            pushd /workspace
            case ${{ matrix.job.arch }} in
              armv7)
                sed -i "s/64bit/32bit/g" ./res/rpm-flutter.spec
                sed -i "s/linux\/x64/linux\/arm/g" ./res/rpm-flutter.spec
                ;;
              aarch64)
                sed -i "s/linux\/x64/linux\/arm64/g" ./res/rpm-flutter.spec
                ;;
            esac
            HBB=`pwd` rpmbuild ./res/rpm-flutter.spec -bb
            pushd ~/rpmbuild/RPMS/${{ matrix.job.arch }}
            mkdir -p /opt/artifacts/rpm
            for name in rustdesk*??.rpm; do
                mv "$name" "/opt/artifacts/rpm/${name%%.rpm}.rpm" 
            done
            # rpm suse package
            echo -e "start packaging suse package"
            pushd /workspace
            case ${{ matrix.job.arch }} in
              armv7)
                sed -i "s/64bit/32bit/g" ./res/rpm-flutter-suse.spec
                sed -i "s/linux\/x64/linux\/arm/g" ./res/rpm-flutter-suse.spec
                ;;
              aarch64)
                sed -i "s/linux\/x64/linux\/arm64/g" ./res/rpm-flutter-suse.spec
                ;;
            esac
            HBB=`pwd` rpmbuild ./res/rpm-flutter.spec -bb
            pushd ~/rpmbuild/RPMS/${{ matrix.job.arch }}
            mkdir -p /opt/artifacts/rpm
            for name in rustdesk*??.rpm; do
                mv "$name" "/opt/artifacts/rpm/${name%%.rpm}-suse.rpm" 
            done

      - name: Rename rustdesk
        shell: bash
        run: |
          for name in rustdesk*??.deb; do
              cp "$name" "${name%%.deb}-${{ matrix.job.arch }}.deb"
          done

      - name: Publish debian package
        if: matrix.job.extra-build-features == '' && env.UPLOAD_ARTIFACT == 'true'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.deb
      
      - name: Build appimage package
        if: ${{ matrix.job.extra-build-features == 'appimage' }}
        shell: bash
        run: |
          # set-up appimage-builder
          pushd /tmp
          wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
          chmod +x appimage-builder-x86_64.AppImage
          sudo mv appimage-builder-x86_64.AppImage /usr/local/bin/appimage-builder
          popd
          # run appimage-builder
          pushd appimage
          sudo appimage-builder --skip-tests --recipe ./AppImageBuilder-${{ matrix.job.arch }}.yml

      - name: Publish appimage package
        if: matrix.job.extra-build-features == 'appimage' && env.UPLOAD_ARTIFACT == 'true'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ./appimage/rustdesk-${{ env.VERSION }}-*.AppImage

      - name: Upload Artifact
        uses: actions/upload-artifact@master
        if: ${{ contains(matrix.job.extra-build-features, 'flatpak') }}
        with:
          name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.deb
          path: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.deb

      - name: Patch archlinux PKGBUILD
        if: ${{ matrix.job.extra-build-features == '' }}
        run: |
          sed -i "s/arch=('x86_64')/arch=('${{ matrix.job.arch }}')/g" res/PKGBUILD
          case ${{ matrix.job.arch }} in
              armv7)
                sed -i "s/linux\/x64/linux\/arm/g" ./res/PKGBUILD
                ;;
              aarch64)
                sed -i "s/linux\/x64/linux\/arm64/g" ./res/PKGBUILD
                ;;
          esac
